name: Scan Dockerfile and Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan:
    runs-on: robot-dind
    permissions:
      contents: read
      packages: write
    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Restore Trivy Cache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.cache/trivy
        key: trivy-cache-${{ runner.os }}
        restore-keys: |
          trivy-cache-${{ runner.os }}

    - name: Scan Dockerfile 
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'config'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        cache: true
        format: 'table'
        output: 'dockerfile_scanning_result.json'

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: '${{ github.repository_owner }}'
        password: '${{ secrets.GITHUB_TOKEN }}'
  
    - name: Downcase REPO
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build image
      run: |
        docker buildx build \
          --cache-from=type=registry,ref=ghcr.io/${{ env.REPO }}:cache \
          --load \
          --tag ghcr.io/${{ env.REPO }}:v1.${{ github.run_number }} . 

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'image'
        scan-ref: 'ghcr.io/${{ env.REPO }}:v1.${{ github.run_number }}'
        severity: 'CRITICAL,HIGH'
        cache: true
        format: 'table'
        output: 'image_scanning_result.json'

    - name: Show Dockerfile scan results in logs
      run: |
        echo "##[command] Show Dockerfile scanning result"
        cat dockerfile_scanning_result.json

    - name: Upload Dockerfile scan results as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Dockerfile scanning result
        path: dockerfile_scanning_result.json

    - name: Show Image scanning results in logs
      run: |
        echo "##[command] Show Image scanning result"
        cat image_scanning_result.json

    - name: Upload Image scanning results as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: Image scanning result
        path: image_scanning_result.json
        